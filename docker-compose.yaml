version: '3.5'

services:
  laravel-app:
    build:
      context: '.'
      args:
        uid: ${UID}
    image: test
    container_name: laravel-app
    ports:
      - 8000:80
    environment:
      - APACHE_RUN_USER=#1000
      - APACHE_RUN_GROUP=#1000
    volumes:
      - .:/var/www/html
    networks:
      backend:
        aliases:
          - app

  mysql-db:
    image: mysql:5.7
    container_name: mysql-db
    volumes:
      - ./docker/mysql/:/var/lib/mysql
    ports:
        - "3307:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
    networks:
      backend:
        aliases:
          - mysql-db

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: pma
    links:
      - mysql-db
    environment:
      PMA_HOST: mysql-db
    restart: always
    ports:
      - 8081:80
    depends_on:
      - mysql-db
    networks:
      backend:
        aliases:
          - pma

  redis:
      image: redis:alpine
      container_name: myapp-redis
      command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
      volumes:
      - ./data/redis:/data
      networks:
        backend:
          aliases:
            - redis

  queue:
    image: test
    depends_on:
      - laravel-app
    volumes:
      - .:/var/www/html
    ## for the queue worker, we use the same image, but run
    ## artisan queue:work
    entrypoint: php /var/www/html/artisan queue:work --verbose --tries=3 --timeout=60
    networks:
      backend:
        aliases:
          - queue

  scheduler:
    image: test
    depends_on:
      - laravel-app
    volumes:
      - .:/var/www/html
    ## for the scheduler we use an infinite while loop
    entrypoint: sh -c "while true; do php artisan schedule:run --verbose --no-interaction & sleep 60; done"
    networks:
      backend:
        aliases:
          - scheduler

networks:
  backend:
    name: backend-network
